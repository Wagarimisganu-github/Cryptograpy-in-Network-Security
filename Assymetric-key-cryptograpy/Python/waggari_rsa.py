# -*- coding: utf-8 -*-
"""Waggari_RSA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19aSgJAOWsP7ZQtT2HaqCR6fmApbcsdOi

🔐 RSA (Rivest–Shamir–Adleman) Algorithm
📘 1. Introduction
RSA is one of the first and most widely used asymmetric encryption algorithms. It is used for:

Confidential data exchange

Digital signatures

Secure key exchange

RSA uses two keys:

A public key to encrypt

A private key to decrypt

It is computationally secure based on the difficulty of factoring large integers.

🧮 2. Algorithm Summary
✅ Key Generation
Choose two large prime numbers: p and q

Compute n = p * q

Compute Euler’s totient: φ(n) = (p - 1)(q - 1)

Choose a public key e such that:

1 < e < φ(n)

gcd(e, φ(n)) = 1

Compute private key d such that:

d ≡ e⁻¹ (mod φ(n))

✅ Public Key
scss
Copy
Edit
(e, n)
✅ Private Key
scss
Copy
Edit
(d, n)
🔐 Encryption
Convert the message to an integer m, then:

ini
Copy
Edit
cipher = (m ^ e) mod n
🔓 Decryption
ini
Copy
Edit
message = (cipher ^ d) mod n
📌 Application Areas of RSA
Secure email (PGP, S/MIME)

SSL/TLS (used in HTTPS)

Digital signatures

Cryptographic key exchange

Blockchain and cryptocurrencies

⚠️ Note:
RSA is not used to encrypt large messages directly — only small blocks or symmetric keys due to computational intensity.

Author **Waggari Misganu Ebsa**( **Certified in Cyber Security**), **Msc in Computer Science**
"""

pip install pycryptodome

# 🔐 RSA Encryption/Decryption using PyCryptodome

from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
from Crypto.Random import get_random_bytes

# 1. Generate RSA Key Pair
key = RSA.generate(2048)
public_key = key.publickey()
encryptor = PKCS1_OAEP.new(public_key)
decryptor = PKCS1_OAEP.new(key)

# 2. Input from user
message = input("Enter a message to encrypt (ASCII text): ").encode()

# 3. Encrypt
ciphertext = encryptor.encrypt(message)
print("🔒 Encrypted (hex):", ciphertext.hex())

# 4. Decrypt
decrypted = decryptor.decrypt(ciphertext)
print("🔓 Decrypted message:", decrypted.decode())

# 5. Match check
if decrypted.decode() == message.decode():
    print("\n✅ Decryption successful and matches original plaintext.")
else:
    print("\n❌ Decryption failed.")