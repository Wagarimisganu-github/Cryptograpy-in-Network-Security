# -*- coding: utf-8 -*-
"""Waggari_Hash Function.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fUdTkMvVL9HxwzehAac5SpCE6DVv1U_p

🔐 Hash Functions in Cryptography
📘 1. Introduction
A hash function is a one-way function that transforms an input (message) into a fixed-size string of characters, which is typically a digest of the message.

Key properties:

Deterministic (same input → same hash)

Fast computation

Irreversible (no decryption)

Collision-resistant (no two inputs should give same hash)

✅ Common algorithms:

SHA-1 (deprecated)

SHA-256

SHA-3

MD5 (insecure, for non-secure uses only)

🧮 2. Hashing Algorithm
Let:

M = original message

H(M) = hash of message

✅ Steps:
Accept input message M

Apply hash function: digest = H(M)

Output fixed-length hash value

🛑 Note: Hash functions do not support decryption. You verify the hash by re-hashing and comparing the values.

🔄 3. Verification Instead of Decryption
To check if a given hash matches an original message:

python
Copy
Edit
if hash_function(message) == provided_hash:
    print("✅ Match!")
📌 4. Application Areas of Hash Functions
Data integrity checks (e.g., file downloads)

Digital signatures

Password storage (only hash stored, not the password)

Blockchain (proof-of-work, block linking)

Message Authentication Codes (MACs)

⚠️ 5. Limitations
Cannot encrypt or decrypt

Vulnerable to brute force or dictionary attacks (if not salted)

Author **Waggari Misganu Ebsa**( **Certified in Cyber Security**), **Msc in Computer Science**
"""

import hashlib

# Hashing function using SHA-256
def hash_sha256(message):
    return hashlib.sha256(message.encode()).hexdigest()

# Step 1: Accept user input
message = input("Enter a message to hash: ")
hashed_message = hash_sha256(message)

# Step 2: Output hash
print("🔐 Hashed Message (SHA-256):", hashed_message)

# Step 3: Simulate verification (not decryption)
check_message = input("\nEnter a message to verify against the hash: ")
if hash_sha256(check_message) == hashed_message:
    print("✅ Hash matches! Integrity verified.")
else:
    print("❌ Hash mismatch. The messages are different.")