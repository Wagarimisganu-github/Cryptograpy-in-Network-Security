# -*- coding: utf-8 -*-
"""Waggari_DES.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mdk8vKwQtU9_meRmtIbz8wJ2PERoQPu3

🔐 DES (Data Encryption Standard)
📘 1. Introduction
DES (Data Encryption Standard) is a symmetric-key block cipher standardized by NIST in the 1970s for secure data encryption.
•	Operates on 64-bit (8-byte) blocks.
•	Uses a 56-bit effective key (stored as a 64-bit key with 8 parity bits).
•	Performs 16 rounds of complex permutation and substitution.
•	Uses Feistel structure.
Despite being considered insecure today due to its short key length, DES laid the foundation for modern symmetric encryption systems like AES.
🧮 2. DES Algorithm Summary
•	Block size: 64 bits
•	Key size: 56 bits (64 bits with parity)
•	Rounds: 16 Feistel rounds
•	Structure: Substitution-permutation network (Feistel)
✅ Encryption Steps
1.	Convert message into 64-bit blocks.
2.	Apply initial permutation (IP).
3.	Perform 16 rounds of Feistel operations.
4.	Apply inverse permutation (IP⁻¹).
5.	Combine blocks into cipher text.
✅ Decryption Steps
•	Same as encryption but with the reverse key schedule.
💡 3. Application Areas
Though DES is deprecated, it was widely used for:
•	Financial systems (e.g., ATM PIN encryption)
•	Smart cards
•	Secure email and data transmission
•	Legacy systems
Modern variants like 3DES and AES have replaced DES in secure applications.
⚠️ 4. Security Issues
•	Key length (56-bit) is vulnerable to brute-force attacks.
•	In 1998, EFF built a machine that cracked DES in 56 hours.

Prepared By **Waggari Misganu Ebsa**( **Certified in Cyber Security**), **Msc in Computer Science**
"""

pip install pycryptodome

# 🔐 DES Encryption/Decryption using PyCryptodome

from Crypto.Cipher import DES
from Crypto.Util.Padding import pad, unpad

# Helper: convert user input to valid 8-byte key
def get_des_key(raw_key):
    return raw_key[:8].ljust(8, '0').encode()

# User Input
raw_key = input("Enter a key (8 characters max): ")
key = get_des_key(raw_key)

message = input("Enter the message to encrypt: ").encode()

# Create DES cipher in ECB mode
cipher = DES.new(key, DES.MODE_ECB)

# Pad message to multiple of 8 bytes
padded_message = pad(message, DES.block_size)

# Encrypt
encrypted = cipher.encrypt(padded_message)
print("🔒 Encrypted (hex):", encrypted.hex())

# Decrypt
cipher_dec = DES.new(key, DES.MODE_ECB)
decrypted_padded = cipher_dec.decrypt(encrypted)

# Unpad to get original message
decrypted = unpad(decrypted_padded, DES.block_size)
print("🔓 Decrypted message:", decrypted.decode())

# Match check
if decrypted.decode() == message.decode():
    print("\n✅ Decryption successful and matches original plaintext.")
else:
    print("\n❌ Decryption failed. Check key and input.")